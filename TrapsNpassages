
#include <iostream>
#include <fstream>
#include<string>
#include<iomanip>
#include <cstdlib>
using namespace std;

//Struct to keep data for players
struct Player {
	string name;
	int position;
	bool isCorrect; //to check whether the answer of the is right or not
};

class Question {
private:
	string QuestionText;
	string Answer1;
	string Answer2;
	string Answer3;
	string Answer4;
	int CorrectAnswer;
public:
	//seting the values for private data members
    void setValues(string q, string a1,string a2, string a3,string a4, int ca){
        QuestionText = q;
        Answer1 = a1;
        Answer2 = a2;
        Answer3 = a3;
        Answer4 = a4;
        CorrectAnswer = ca;
	}
	int GetCorrectAnswe() {
		return CorrectAnswer;
	}
	// function to ask questions
	int askQuestion() {
			
            // Print the questions
            cout << QuestionText << endl;
            cout << "1. " << Answer1 << endl;
            cout << "2. " << Answer2 << endl;
            cout << "3. " << Answer3 << endl;
            cout << "4. " << Answer4 << endl;
            cout << endl;

			//reseting the answered variable
			int answeredOption = 0;
			// Display the answer
			cout << "What is your answer?(in number)"<< endl;
			cin >> answeredOption;
			//printing the select option
			switch (answeredOption) {
			case 1:
				cout << endl << "You answered " << Answer1 << endl;
				break;
			case 2:
				cout << endl << "You answered " << Answer2 << endl;
				break;
			case 3:
				cout << endl << "You answered " << Answer3 << endl;
				break;
			case 4:
				cout << endl << "You answered " << Answer4 << endl;
				break;
			}
			return answeredOption;
    }
	//function to check answer
	bool CheckAnswer(int answeredOption) {
		// If the answer is correct
		if (answeredOption == CorrectAnswer) {
			cout << endl;
			cout << "Correct !" << endl;
			return true;
		}

		// Otherwise
		else {
			cout << endl;
			cout << "Wrong !" << endl;
			cout << endl;
			return false;

		}
	}
	
};


//populating Question array from file 
void QuestionReadingFromFile(Question str[100], int& size) {

	//Opening Question FILE
	fstream file;
	file.open("Questions.txt");
	//Checking file not open then show error
	if (!file) {
		cout << "Unable to open";
	}
	//file opened
	else {
		//taking total number of Question in int
		file >> size;
		int i = 0;
		//reading Each questions and Populate the Question class data members
		while (i!=size+1) {
			string question, ans1, ans2, ans3, ans4;
			int correct;
			getline(file, question, '/');
			getline(file, ans1, '/');
			getline(file, ans2, '/');
			getline(file, ans3, '/');
			getline(file, ans4, '/');
			file>> correct;

			//setting the member of question class and increamenting i
			str[i++].setValues(question,ans1,ans2,ans3,ans4,correct);
		}
	}


}

//return the value of the dice (1-6)
int diceRoll() {
	srand(time(0));
	int value= 1 + (rand() % 6);
	cout << "Dice rolled: "<<value<<endl<<endl;
		return value;
}

void askQuestionAndTakeAnswers(Question questionArray[100], int n,Player players[]) {
	//get random number within range
	srand(time(0));
	int index = (rand() % n);
	//reseting Answered boolan
	for (int i = 0; i < 4; i++) {
		players[i].isCorrect = false;
	}
	//samme question asked to each player 
	for (int i = 0; i < 4; i++) {
		cout << "Player " << i + 1 << " Turn ";
		int answer = questionArray[index].askQuestion();  // it returns option selected number 
		bool isRight =questionArray[index].CheckAnswer(answer);// it uses the option number and check the answer
		players[i].isCorrect = isRight;

	}
}

//check each player there answer and add or subtract position
void CheckingPlayersAnswers(Player players[4],int diceValue, int TrapsAndPass[100],bool &isWin) {
	for (int i = 0; i < 4; i++) {
		if (players[i].isCorrect == true) {
			//if player new postion is no trap then minus one
			if (TrapsAndPass[players[i].position + diceValue] == -1) {
				cout << endl << endl <<players[i].name<<" got traped and got one step back \n" ;
				if(players[i].position != 0)
					players[i].position -= 1;

			}
			else if (TrapsAndPass[players[i].position + diceValue] != 0) {
				cout << endl << endl << players[i].name << " found secret passage and adds "<<TrapsAndPass[players[i].position+diceValue]<<endl;
				players[i].position += diceValue + TrapsAndPass[players[i].position + diceValue];
			}else
			players[i].position += diceValue;
			
			if (players[i].position > 100) {
				cout << "PLayer " << i + 1 << " Winsssss";
				isWin = true;
			}
		}
		else {
			
			if (players[i].position == 0) {
				continue;
			}
			else {
				players[i].position -= 1;
				if (TrapsAndPass[players[i].position] == -1) {
					cout << "\n" << players[i].name<<" found the trap and got one more step back\n";
					if(players[i].position!=0)
					players[i].position -= 1;
				}
				
			}

		}
	}
}
//buble sort to sort the leader of the players on the basis of their positions
void bubbleSort(Player players[4])
{
	for (int i = 0; i < 4- 1; i++)
		// Last i elements are already in place
		for (int j = 0; j <4 - i - 1; j++)
			if (players[j].position < players[j + 1].position)
			{
				Player temp;
				temp.isCorrect = players[j].isCorrect;
				temp.name = players[j].name;
				temp.position= players[j].position;
				players[j].isCorrect = players[j + 1].isCorrect;
				players[j].name= players[j + 1].name;
				players[j].position = players[j + 1].position;
				players[j + 1].isCorrect = temp.isCorrect;
				players[j + 1].name = temp.name;
				players[j + 1].position = temp.position;

			}
}
//taking player name from user
void inputPlayersName(Player players[4]) {
	cin.ignore();
	for (int i = 0; i < 4; i++) {
		cout << "Enter Player " << i + 1 << " Name: ";
		
		getline(cin,players[i].name);
		players[i].position = 0;
	}
}
//print positoin and player name on console
void ShowPlayersPosition(Player players[4]) {
	bubbleSort(players); //it sorts then below code displays
	for (int i = 0; i < 4; i++) {
		cout<<players[i].name<<" is at position "<<players[i].position<<endl;
	}
}

//seting traps and seceret passages randomly and set all other places to zero
void SetTrapsAndPassage(int arr[100]) {
	srand(time(0));

	//seting all blocks to simple
	for (int i = 0; i < 100; i++)
	{
		arr[i] = 0;
	}
	//seting the traps
	for (int i = 0; i < 40; i++) {
		arr[rand() % 100] = -1;
	}
	//passagge that store add up in dice value for example it has 5 in it so it add to dice value and jump to that value 
	for (int i = 0; i < 40; i++) {
		arr[rand() % 80] =1+ rand()%7; //it randomly add the number
	}



}
//it prints all the posiotion of traps and passages
void PrintTrapsAndPassage(int arr[100]) {
	int c = 0;
	
	cout << "Traps are at Position: ";
	for (int i = 0; i < 100; i++) {
		if (arr[i] == -1) {
			cout << i<<"   ";
		}
	}
	cout << endl << "Passages are at position:  ";
	for (int i = 0; i < 100; i++) {
		if (arr[i] == -1) {
			continue;
		}
		else if (arr[i] != 0) {
			cout << i << "   ";
		}
	}
	cout << endl;
}

void SaveGame(Player players[4], int trapAndPassages[100]) {
	/*cout << "Enter the Save File name plz..(fileName.txt) \n";
	string str;
	getline(cin, str);
	*/ofstream fout;
	fout.open("SaveFile.txt");
	if (!fout) {
		cout<<"unable to open";
	}
	else
	{
		for (int i = 0; i < 4; i++) {
			fout << players[i].name;
			fout << " /";
			fout << players[i].position;
			
		}
		for (int i = 0; i < 100; i++) {
			fout  << trapAndPassages[i]<<" ";
		}

	}
	fout.close();
}

void LoadGame(Player players[4], int TrapAndPassages[100]) {
	/*cout << "Enter the Name of the load game file Name \n";
	string str;
	getline(cin, str);
	*/ifstream fin;
	fin.open("SaveFile.txt");
	if (!fin) {
		cout << "Unable to open";
	}
	else {
		for (int i = 0; i < 4; i++)
		{
			getline(fin, players[i].name, '/');

			fin>> players[i].position;
		}
		for (int i = 0; i < 100; i++)
		{
			fin >> TrapAndPassages[i];
		}
	}
}
int main() {
	
	Player players[4]; //players array
	int TrapsAndPassages[100]; //trap and passage array
	Question QuestionsArray[100]; int numOfQuestions;   //questions array
	
	cout << "Do you want to \n1) Load Game from saveFile \n2)New Game   \n";
	int select;
	cin >> select;
	if (select == 1) {
		LoadGame(players, TrapsAndPassages);
	}
	else {
		SetTrapsAndPassage(TrapsAndPassages); //set traps and passages 
		inputPlayersName(players);  //taking input from user

	}
	QuestionReadingFromFile(QuestionsArray, numOfQuestions); //read from file and populate the array
	bool isWin = false;
	while (!isWin) {
		system("cls");
		PrintTrapsAndPassage(TrapsAndPassages);
		int diceValue= diceRoll(); //get dice value 
		ShowPlayersPosition(players);  //shows all sorted players positions
		askQuestionAndTakeAnswers(QuestionsArray, numOfQuestions,players);  //it ask questions and check with correct answer and store the result in player struct 
		
		CheckingPlayersAnswers(players, diceValue,TrapsAndPassages,isWin); //it chekc and do  arithmatic in position of the player and return isWin by refrence
		if (isWin == true) {
			cout << "\n Thank you for playing\n";
		}
		system("pause");
		SaveGame(players, TrapsAndPassages);

	}






}
